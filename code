// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract Wallet {
    address public owner;

    event Deposit(address indexed sender, uint amount);
    event Withdraw(address indexed receiver, uint amount);
    event Transfer(address indexed from, address indexed to, uint amount);

    constructor() {
        owner = msg.sender;
    }

    // Deposit funds into the wallet
    function deposit() public payable {
        require(msg.value > 0, "Deposit amount must be greater than zero");
        emit Deposit(msg.sender, msg.value);
    }

    // Withdraw funds from the wallet
    function withdraw(uint amount) public {
        require(msg.sender == owner, "Only the owner can withdraw funds");
        require(amount <= address(this).balance, "Insufficient balance");

        payable(msg.sender).transfer(amount);
        emit Withdraw(msg.sender, amount);
    }

    // Transfer funds to another address
    function transfer(address payable recipient, uint amount) public {
        require(msg.sender == owner, "Only the owner can transfer funds");
        require(amount <= address(this).balance, "Insufficient balance");

        recipient.transfer(amount);
        emit Transfer(msg.sender, recipient, amount);
    }

    // Get the wallet balance
    function getBalance() public view returns (uint) {
        return address(this).balance;
    }
}